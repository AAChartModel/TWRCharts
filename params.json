{"name":"Twrcharts","tagline":"An iOS wrapper for ChartJS. Easily build animated charts by leveraging the power of native Obj-C code.","body":"TWRCharts\r\n=================\r\n\r\n## TWRCharts\r\n\r\nAn Obj-C wrapper for ChartJS. Easily build animated charts by leveraging the power of native code.\r\n\r\nTWRCharts is yet another charting library for iOS. TWRCharts is basically an effort to port the famous ChartJS Javascript library to native Obj-C code; its power lies in the fact that it gives developers the flexibility to choose between loading a ChartJS Javascript file (more on this later) into a TWRChartView, or using native methods to build either a line / bar or circular (pie / doughnut) chart.\r\n\r\nLoading the chart from a Javascript file is very easy though little configurable and dynamic, whereas by using the native extension the user can update and refresh data on the fly. The final choice is up to you!\r\n\r\nNative code API does not yet support all type of charts provided by ChartJS; only line, bars, pies and doughnuts are currently available.\r\n\r\nTWRCharts's main class is ```TWRChartView```, a subclass of ```UIWebView``` backed by an HTML file that the user never has to deal with. The API has been engineered to make it feel like a fully native experience, both from a developer and an end user point of view.\r\n\r\n[![TWRCharts Demo](http://cocoahunter-blog.s3.amazonaws.com/TWRCharts/twrcharts_screen.png)](http://cocoahunter-blog.s3.amazonaws.com/TWRCharts/TWRChartsDemoScreencast.mp4)\r\n\r\n## Usage\r\n\r\nUsage is easy.\r\n\r\nAdd the dependency to your `Podfile`:\r\n\r\n```ruby\r\nplatform :ios\r\npod 'TWRChart'\r\n```\r\n\r\nRun `pod install` to install the dependencies.\r\n\r\nNext, import the header file wherever you want to use the custom view:\r\n\r\n```objc\r\n#import <TWRCharts/TWRChart.h>\r\n```\r\n\r\n### Creating the chart view\r\n\r\nJust declare a ```TWRChartView``` property in your header file and instantiate it as you would do with a normal view by defining its frame rect. Then just add it to your controller's view hierarchy.\r\n\r\n```objc\r\n// Chart View\r\n_chartView = [[TWRChartView alloc] initWithFrame:CGRectMake(0, 64, 320, 300)];\r\n\r\n// Optionally assign here a JS file (see below)\r\n\r\n// Add the chart view to the controller's view\r\n[self.view addSubview:_chartView];\r\n```\r\n\r\n### Loading a chart from a JS file\r\n\r\nDrop in your Xcode project a .js file and make sure it's been added to the resources that are being bundled with the project in the build phases of your project.\r\n\r\nThen just get a handle on the file and set its path to the TWRChartView that's being added to the controller's view.\r\n\r\n```objc\r\nNSString *jsFilePath = [[NSBundle mainBundle] pathForResource:@\"file\" ofType:@\"js\"];\r\n[_chartView setChartJsFilePath:jsFilePath];\r\n```\r\n\r\nYou can use any of the chart types currently supported by [ChartJS](http://www.chartjs.org). Here's an example of how you would load a Polar Chart.\r\n\r\n```js\r\nvar context = document.getElementById(\"canvas\").getContext(\"2d\");\r\nvar polarData = [\r\n    {\r\n        value : 30,\r\n        color: \"#D97041\"\r\n    },\r\n    {\r\n        value : 90,\r\n        color: \"#C7604C\"\r\n    },\r\n    {\r\n        value : 24,\r\n        color: \"#21323D\"\r\n    },\r\n    {\r\n        value : 58,\r\n        color: \"#9D9B7F\"\r\n    },\r\n    {\r\n        value : 82,\r\n        color: \"#7D4F6D\"\r\n    },\r\n    {\r\n        value : 8,\r\n        color: \"#584A5E\"\r\n    }\r\n]\r\n\r\nvar polarArea = new Chart(context).PolarArea(polarData);\r\n```\r\n\r\nIf you're planning on to use JS files to load your charts, be sure to make the following as the first line of your *.js* file:\r\n\r\n```js\r\nvar context = document.getElementById(\"canvas\").getContext(\"2d\");\r\n```\r\n\r\nThis code retrieves the correct context from the HTML file that backs the TWRChartView.\r\n\r\n### Loading a chart using native Obj-C code\r\n\r\nDepending on the type of chart you want to plot (bar / line / pie...) you need to instantiate different objects, but mainly you need to follow these steps:\r\n\r\n- Instantiate data objects;\r\n- Instantiate a chart object by passing the data objects along with labels;\r\n- Load the chart object onto the chart view.\r\n\r\nHere's some example code:\r\n\r\n```objc\r\n// Build chart data\r\nTWRDataSet *dataSet1 = [[TWRDataSet alloc] initWithDataPoints:@[@10, @15, @5, @15, @5]];\r\nTWRDataSet *dataSet2 = [[TWRDataSet alloc] initWithDataPoints:@[@5, @10, @5, @15, @10]];\r\n\r\nNSArray *labels = @[@\"A\", @\"B\", @\"C\", @\"D\", @\"E\"];\r\n\r\n// Instantiate the chart object\r\nTWRLineChart *line = [[TWRLineChart alloc] initWithLabels:labels\r\n                                                 dataSets:@[dataSet1, dataSet2]\r\n                                                 animated:NO];\r\n\r\n// Load the chart object onto the view\r\n[_chartView loadLineChart:line];\r\n```\r\n\r\n#### Data Sets\r\n\r\nTWRDataSet (which represents the data for bar and line charts) can be instantiated with the following *init* method:\r\n\r\n```objc\r\n- (instancetype)initWithDataPoints:(NSArray *)dataPoints\r\n                         fillColor:(UIColor *)fillColor\r\n                       strokeColor:(UIColor *)strokeColor\r\n                        pointColor:(UIColor *)pointColor\r\n                  pointStrokeColor:(UIColor *)pointStrokeColor;\r\n```\r\n\r\nYou can customize the fill and stroke colors for either the bar or the line chart. For the latter one you can also choose the point fill and point stroke colors.\r\n\r\nAt a minimum you have to provide the data points, which is an array of NSNumbers.\r\n\r\n#### Line / Bar Charts\r\n\r\nLine and bar charts can be instantiated as such:\r\n\r\n```objc\r\n- (instancetype)initWithLabels:(NSArray *)labels\r\n                      dataSets:(NSArray *)dataSets\r\n                      animated:(BOOL)animated;\r\n```\r\n\r\nWhen passing the chart objects to the chart view, you need to call one of the following methods called on your instance of ```TWRChartView``` according to the type of object you are dealing with:\r\n\r\n```objc\r\n- (void)loadBarChart:(TWRBarChart *)barChart;\r\n- (void)loadLineChart:(TWRLineChart *)lineChart;\r\n```\r\n\r\nA sweet final touch: you even have an option to call the above methods with a completion handler to get a callback whenever the chart animation finishes. You wouldn't even guess that there's a bunch of Javascript code running underneath!\r\n\r\n```objc\r\n- (void)loadBarChart:(TWRBarChart *)barChart withCompletionHandler:(TWRAnimationCompletionBlock)block;\r\n- (void)loadLineChart:(TWRLineChart *)lineChart withCompletionHandler:(TWRAnimationCompletionBlock)block;\r\n```\r\n\r\n#### Circular Charts\r\n\r\nAnd finally, circular charts can be instantiated with the following method:\r\n\r\n```objc\r\n- (instancetype)initWithValues:(NSArray *)values\r\n                        colors:(NSArray *)colors\r\n                          type:(TWRCircularChartType)type\r\n                      animated:(BOOL)animated;\r\n```\r\n\r\nYou even get a chance to choose the chart type, either a pie chart (TWRCircularChartTypePie) or a doughnut (TWRCircularChartTypeDoughnut).\r\n\r\nAnd again, once you have the chart object, you can add it to the chart view with one of the following two methods called on your instance of ```TWRChartView```:\r\n\r\n```objc\r\n- (void)loadCircularChart:(TWRCircularChart *)circularChart;\r\n- (void)loadCircularChart:(TWRCircularChart *)circularChart withCompletionHandler:(TWRAnimationCompletionBlock)block;\r\n```\r\n\r\n## Requirements\r\n\r\n`TWRCharts` requires iOS 6.x or greater.\r\n\r\n\r\n## License\r\n\r\nUsage is provided under the [MIT License](http://opensource.org/licenses/mit-license.php).  See LICENSE for the full details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}